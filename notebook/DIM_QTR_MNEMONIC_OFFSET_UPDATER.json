{
	"name": "DIM_QTR_MNEMONIC_OFFSET_UPDATER",
	"properties": {
		"folder": {
			"name": "Time"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false
		},
		"metadata": {
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			}
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"%run utils/utils-adls-credentials"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run utils/utils-setup-logger"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"# is_first_MMW = True"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Update TIME.DIM_QTR_MNEMONIC_OFFSET table.\r\n",
					"\r\n",
					"# Column_Name\t            Update Frequency\r\n",
					"# DAILY_QTR_MNEMONIC_OFFSET\tFirst day of every quarter \r\n",
					"# QTR_MNEMONIC_OFFSET\t    First MMW of every quarter\r\n",
					"# CURR_QTR_INDC\t            First MMW of every quarter\r\n",
					"\r\n",
					"if is_first_MMW is None:\r\n",
					"    logger.error(\"is_first_MMW is mandatory input parameter\")\r\n",
					"    mssparkutils.notebook.exit(\"is_first_MMW is mandatory input parameter\")\r\n",
					"\r\n",
					"else:        \r\n",
					"    if is_first_MMW:\r\n",
					"        #update QTR_MNEMONIC_OFFSET and CURR_QTR_INDC\r\n",
					"        df_DIM_QTR_MNEMONIC_OFFSET = spark.sql(\"\"\"\r\n",
					"            select distinct\r\n",
					"            YEAR_QTR_SEQ_WED AS YEAR_QTR_SEQ_WED,\r\n",
					"            YEAR_QTR_SEQ as YEAR_QTR_SEQ,\r\n",
					"            DAILY_QTR_MNEMONIC_OFFSET AS DAILY_QTR_MNEMONIC_OFFSET,\r\n",
					"            cast((QTR_MNEMONIC_OFFSET -1) AS SMALLINT) AS QTR_MNEMONIC_OFFSET,\r\n",
					"            CURR_QTR_INDC AS CURR_QTR_INDC,\r\n",
					"            IW_ROW_UPDT_TS AS IW_ROW_UPDT_TS from time.DIM_QTR_MNEMONIC_OFFSET T\r\n",
					"        \"\"\")\r\n",
					"        df_DIM_QTR_MNEMONIC_OFFSET = df_DIM_QTR_MNEMONIC_OFFSET.withColumn('CURR_QTR_INDC', lit('N'))\r\n",
					"        df_DIM_QTR_MNEMONIC_OFFSET = df_DIM_QTR_MNEMONIC_OFFSET.withColumn(\"CURR_QTR_INDC\", when(df_DIM_QTR_MNEMONIC_OFFSET.QTR_MNEMONIC_OFFSET == 0, 'Y').otherwise('N'))\r\n",
					"        logger.info(\"Writing data into TIME.DIM_QTR_MNEMONIC_OFFSET table\")\r\n",
					"        df_DIM_QTR_MNEMONIC_OFFSET.write.format(\"delta\").mode(\"overwrite\").saveAsTable(\"time.DIM_QTR_MNEMONIC_OFFSET\")\r\n",
					"        logger.info(\"Load Completed: time.DIM_QTR_MNEMONIC_OFFSET\")\r\n",
					"    else:\r\n",
					"        #update DAILY_QTR_MNEMONIC_OFFSET\r\n",
					"        df_DIM_QTR_MNEMONIC_OFFSET = spark.sql(\"\"\"\r\n",
					"            select distinct\r\n",
					"            YEAR_QTR_SEQ_WED AS YEAR_QTR_SEQ_WED,\r\n",
					"            YEAR_QTR_SEQ as YEAR_QTR_SEQ,\r\n",
					"            cast((DAILY_QTR_MNEMONIC_OFFSET -1) AS SMALLINT) AS DAILY_QTR_MNEMONIC_OFFSET,\r\n",
					"            QTR_MNEMONIC_OFFSET AS QTR_MNEMONIC_OFFSET,\r\n",
					"            CURR_QTR_INDC AS CURR_QTR_INDC,\r\n",
					"            IW_ROW_UPDT_TS AS IW_ROW_UPDT_TS from time.DIM_QTR_MNEMONIC_OFFSET T\r\n",
					"        \"\"\")\r\n",
					"        logger.info(\"Writing data into TIME.DIM_QTR_MNEMONIC_OFFSET table\")\r\n",
					"        df_DIM_QTR_MNEMONIC_OFFSET.write.format(\"delta\").mode(\"overwrite\").saveAsTable(\"time.DIM_QTR_MNEMONIC_OFFSET\")\r\n",
					"        logger.info(\"Load Completed: time.DIM_QTR_MNEMONIC_OFFSET\")"
				]
			}
		]
	}
}